import{j as e}from"./jsx-runtime-8406ef1e.js";import{T as i}from"./index-426f0325.js";import"./index-ad58220e.js";import"./_commonjsHelpers-de833af9.js";import"./styled-components.browser.esm-675ea4f2.js";import"./config-d87c20af.js";import"./Header-30441d32.js";import"./extends-4c19d496.js";import"./getElementType-ff0d42f5.js";import"./childrenUtils-dd3b0ba5.js";import"./Icon-370c2d23.js";import"./inheritsLoose-5494d9cc.js";import"./factories-df82d7d3.js";import"./Label-d5345000.js";import"./ModernAutoControlledComponent-6bbe7d3d.js";import"./assertThisInitialized-081f9914.js";import"./htmlPropsUtils-2b22d933.js";import"./includes-192f9362.js";import"./Portal-8d2f321a.js";import"./index-4fee7e45.js";import"./Ref-51c42093.js";import"./objectWithoutPropertiesLoose-f3b3ace0.js";const Te={title:"Typography",component:i,tags:["autodocs"],argTypes:{text:{control:"text"},type:{control:"select",options:["heading","body","caption","button"]},size:{control:"select",options:["mini","tiny","small","medium","large","big","huge","massive"]},multiplier:{control:"text",description:'Size multiplier - accepts numbers (e.g., 1.5) or strings (e.g., "1.5")',defaultValue:"1"},as:{control:"select",options:["h1","h2","h3","h4","h5","h6"],description:"Only relevant if type is heading",if:{arg:"type",eq:"heading"}}}},r=Y=>e.jsx(i,{...Y}),l=r.bind({});l.args={text:"Hello World",type:"heading"};const a=r.bind({});a.args={text:"Hello World",type:"body"};const m=r.bind({});m.args={text:"Hello World",type:"caption",textAlign:"center"};const d=r.bind({});d.args={text:"Hello World",type:"button"};const n=r.bind({});n.args={text:"Hello World",type:"heading",size:"small"};const s=r.bind({});s.args={text:"Hello World",type:"heading",size:"small",as:"h1",children:"Hello World"};const u=r.bind({});u.args={content:"Hello World",type:"heading",size:"small",as:"h1",subheader:"Subheader"};const p=r.bind({});p.args={text:"Hello World with 1.5x size",type:"heading",size:"medium",multiplier:"1.5"};const o=()=>e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:[e.jsx(i,{id:"multiplier-0.5",text:"0.5x size multiplier",type:"body",multiplier:"0.5"}),e.jsx(i,{id:"multiplier-0.75",text:"0.75x size multiplier",type:"body",multiplier:"0.75"}),e.jsx(i,{id:"multiplier-1",text:"Normal size (1x multiplier)",type:"body",multiplier:"1"}),e.jsx(i,{id:"multiplier-1.25",text:"1.25x size multiplier",type:"body",multiplier:"1.25"}),e.jsx(i,{id:"multiplier-1.5",text:"1.5x size multiplier",type:"body",multiplier:"1.5"}),e.jsx(i,{id:"multiplier-2",text:"2x size multiplier",type:"body",multiplier:"2"})]}),t=()=>e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:[e.jsx(i,{id:"string-multiplier",text:"String multiplier (1.5)",type:"body",multiplier:"1.5"}),e.jsx(i,{id:"number-multiplier",text:"Number multiplier (2)",type:"body",multiplier:2}),e.jsx(i,{id:"mini-multiplier",text:"Mini size as multiplier",type:"body",multiplier:"mini"}),e.jsx(i,{id:"massive-multiplier",text:"Massive size as multiplier & size small",type:"body",size:"small",multiplier:"small"})]});t.parameters={docs:{description:{story:`
The multiplier prop accepts different types of values:
- String numbers (e.g., "1.5")
- Numbers (e.g., 2)
- Size constants from config (e.g., "mini", "massive")

This provides flexibility in how you want to specify the size scaling of your typography.
      `}}};o.__docgenInfo={description:"Multiple examples showing different multiplier values",methods:[],displayName:"MultiplierExamples"};t.__docgenInfo={description:`Examples showing different types of multiplier values:
- Number (as string)
- Number (as number)
- Size constants from config`,methods:[],displayName:"MultiplierTypes"};var y,c,g;l.parameters={...l.parameters,docs:{...(y=l.parameters)==null?void 0:y.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(g=(c=l.parameters)==null?void 0:c.docs)==null?void 0:g.source}}};var h,x,b;a.parameters={...a.parameters,docs:{...(h=a.parameters)==null?void 0:h.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(b=(x=a.parameters)==null?void 0:x.docs)==null?void 0:b.source}}};var f,T,z;m.parameters={...m.parameters,docs:{...(f=m.parameters)==null?void 0:f.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(z=(T=m.parameters)==null?void 0:T.docs)==null?void 0:z.source}}};var S,v,j;d.parameters={...d.parameters,docs:{...(S=d.parameters)==null?void 0:S.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(j=(v=d.parameters)==null?void 0:v.docs)==null?void 0:j.source}}};var H,M,W;n.parameters={...n.parameters,docs:{...(H=n.parameters)==null?void 0:H.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(W=(M=n.parameters)==null?void 0:M.docs)==null?void 0:W.source}}};var N,w,P,E,_;s.parameters={...s.parameters,docs:{...(N=s.parameters)==null?void 0:N.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(P=(w=s.parameters)==null?void 0:w.docs)==null?void 0:P.source},description:{story:"HeaderProps story demonstrates the usage of the `as` prop, which is only relevant\nif the `type` is `heading`. The `as` prop allows specifying which HTML heading tag \nshould be used (e.g., h1, h2, etc.).\n\nThe `size` prop can be applied to all `Typography` types, allowing to adjust the \nfont size according to the provided size.",...(_=(E=s.parameters)==null?void 0:E.docs)==null?void 0:_.description}}};var D,B,C;u.parameters={...u.parameters,docs:{...(D=u.parameters)==null?void 0:D.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(C=(B=u.parameters)==null?void 0:B.docs)==null?void 0:C.source}}};var I,O,q,A,L;p.parameters={...p.parameters,docs:{...(I=p.parameters)==null?void 0:I.docs,source:{originalSource:"(args: TypographyProps) => <Typography {...args} />",...(q=(O=p.parameters)==null?void 0:O.docs)==null?void 0:q.source},description:{story:`This story demonstrates the usage of the multiplier prop to adjust the size
of the typography component relative to its base size.`,...(L=(A=p.parameters)==null?void 0:A.docs)==null?void 0:L.description}}};var R,V,k,F,G;o.parameters={...o.parameters,docs:{...(R=o.parameters)==null?void 0:R.docs,source:{originalSource:`() => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '1rem'
}}>
    <Typography id="multiplier-0.5" text="0.5x size multiplier" type="body" multiplier="0.5" />
    <Typography id="multiplier-0.75" text="0.75x size multiplier" type="body" multiplier="0.75" />
    <Typography id="multiplier-1" text="Normal size (1x multiplier)" type="body" multiplier="1" />
    <Typography id="multiplier-1.25" text="1.25x size multiplier" type="body" multiplier="1.25" />
    <Typography id="multiplier-1.5" text="1.5x size multiplier" type="body" multiplier="1.5" />
    <Typography id="multiplier-2" text="2x size multiplier" type="body" multiplier="2" />
  </div>`,...(k=(V=o.parameters)==null?void 0:V.docs)==null?void 0:k.source},description:{story:"Multiple examples showing different multiplier values",...(G=(F=o.parameters)==null?void 0:F.docs)==null?void 0:G.description}}};var J,K,Q,U,X;t.parameters={...t.parameters,docs:{...(J=t.parameters)==null?void 0:J.docs,source:{originalSource:`() => <div style={{
  display: 'flex',
  flexDirection: 'column',
  gap: '1rem'
}}>
    {/* String multiplier */}
    <Typography id="string-multiplier" text="String multiplier (1.5)" type="body" multiplier="1.5" />
    
    {/* Number multiplier */}
    <Typography id="number-multiplier" text="Number multiplier (2)" type="body" multiplier={2} />
    
    {/* Size constants from config */}
    <Typography id="mini-multiplier" text="Mini size as multiplier" type="body" multiplier="mini" />
    
    <Typography id="massive-multiplier" text="Massive size as multiplier & size small" type="body" size="small" multiplier="small" />
  </div>`,...(Q=(K=t.parameters)==null?void 0:K.docs)==null?void 0:Q.source},description:{story:`Examples showing different types of multiplier values:
- Number (as string)
- Number (as number)
- Size constants from config`,...(X=(U=t.parameters)==null?void 0:U.docs)==null?void 0:X.description}}};const ze=["Default","Body","Caption","Button","Sizes","HeaderProps","HeaderWithSubHeader","WithMultiplier","MultiplierExamples","MultiplierTypes"];export{a as Body,d as Button,m as Caption,l as Default,s as HeaderProps,u as HeaderWithSubHeader,o as MultiplierExamples,t as MultiplierTypes,n as Sizes,p as WithMultiplier,ze as __namedExportsOrder,Te as default};
